import { useState, useEffect } from "react";
import PropTypes from "prop-types";
import styles from "./page-container.module.css";
import { useNavigate, useSearchParams } from "react-router-dom";

// URL –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API
const API_ENDPOINTS = {
  login: "http://localhost:8000/api/login/", // –∑–¥–µ—Å—å –±—É–¥–µ—Ç URL –¥–ª—è –≤—Ö–æ–¥–∞
  register: "http://localhost:8000/api/register/", // –∑–¥–µ—Å—å –±—É–¥–µ—Ç URL –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
};

const PageContainer = ({ className = "", onLoginSuccess = () => {} }) => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const initialMode = searchParams.get("mode") === "register" ? "register" : "login";

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    confirmPassword: ""
  });
  const [isAgreed, setIsAgreed] = useState(false);
  const [formError, setFormError] = useState("");
  const [formSuccess, setFormSuccess] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoginMode, setIsLoginMode] = useState(initialMode === "login");
  const [agreementError, setAgreementError] = useState("");

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  useEffect(() => {
    const currentMode = searchParams.get("mode") === "register" ? "register" : "login";
    setIsLoginMode(currentMode === "login");
  }, [searchParams]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  const validateEmail = (email) => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  const validatePassword = (password) => password.length >= 8;

  // –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã
  useEffect(() => {
    if (formError) setFormError("");
    if (formSuccess) setFormSuccess("");
    if (agreementError) setAgreementError("");
  }, [formData, isAgreed, isLoginMode]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è
  const handleAgreementChange = (e) => {
    setIsAgreed(e.target.checked);
    if (e.target.checked) setAgreementError("");
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  const handleSubmit = async (e) => {
    e.preventDefault();

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
    if (!formData.email || !formData.password) {
      setFormError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
      return;
    }
    // if (!validateEmail(formData.email)) {
    //   setFormError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
    //   return;
    // }
    if (!validatePassword(formData.password)) {
      setFormError("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤");
      return;
    }
    if (!isLoginMode && formData.password !== formData.confirmPassword) {
      setFormError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
      return;
    }
    if (!isLoginMode && !isAgreed) {
      setAgreementError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      document.getElementById("agreementCheckbox")?.focus();
      return;
    }

    setFormError("");
    setAgreementError("");
    setIsLoading(true);

    try {
      const endpoint = isLoginMode ? API_ENDPOINTS.login : API_ENDPOINTS.register;
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: formData.email,
          password: formData.password
        })
      });
      const data = await response.json();
      console.log(data)
      console.log("fetched resource")
      if (!response.ok) {
        setFormError(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ");
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ localStorage
        localStorage.setItem("accessToken", data.access);
        localStorage.setItem("refreshToken", data.refresh);

        setFormSuccess(isLoginMode ? "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        onLoginSuccess(data);

        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (!isLoginMode) {
          setFormData({ email: "", password: "", confirmPassword: "" });
          setIsAgreed(false);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
      setFormError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit1 = async () => {
    const response = await fetch("http://localhost:8000/api/completed-bets?limit=3", {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' , "Authorization": `Bearer ${localStorage.getItem("accessToken")}` },
      // body: JSON.stringify({
      //   amount: 100,
      //   chart_type_id: 1,
      //   direction: "UP",
      //   entry_price: 10400.0,
      //   timeframe: 1
      // })
    });

    console.log(response.json())
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
  const togglePasswordVisibility = (field) => {
    if (field === 'password') setShowPassword(!showPassword);
    else if (field === 'confirmPassword') setShowConfirmPassword(!showConfirmPassword);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º URL
  const toggleMode = () => {
    const newMode = isLoginMode ? "register" : "login";
    navigate(`?mode=${newMode}`, { replace: true });
    setFormData({ email: "", password: "", confirmPassword: "" });
    setFormError("");
    setFormSuccess("");
    setAgreementError("");
    setIsAgreed(false);
  };

  return (
      <form className={`${styles.pageContainer} ${className}`} onSubmit={handleSubmit}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å */}
        <div className={styles.authContainer}>
          <div className={styles.authInnerContainer} onClick={() => navigate("/")}>
            <img
                className={styles.spacerIcon}
                loading="lazy"
                alt=""
                src="/vector-arro.svg"
            />
          </div>
          <div className={styles.registrationFormParent}>
            <div className={styles.registrationForm}>
              <img
                  className={styles.spacerIcon1}
                  loading="lazy"
                  alt=""
                  src="/vector-1.svg"
              />
            </div>
            <div className={styles.credentials}>
              <div className={styles.registrationLabel}>
                <h1 className={styles.h1}>{isLoginMode ? "–í—Ö–æ–¥" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"}</h1>
              </div>
              <div className={styles.loginLabel}>
                <div className={styles.div}>
                  {isLoginMode ? "–ï—â–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?" : "–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?"}
                </div>
                <div
                    className={styles.registrationBtn}
                    onClick={toggleMode}
                    role="button"
                    tabIndex={0}
                >
                  <div className={styles.div1}>{isLoginMode ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" : "–í–æ–π—Ç–∏"}</div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ —É—Å–ø–µ—Ö–µ */}
        {formError && <div className={styles.formError}>{formError}</div>}
        {formSuccess && <div className={styles.formSuccess}>{formSuccess}</div>}

        {/* –ü–æ–ª–µ Email */}
        <div className={styles.emailInput}>
          <div className={styles.stringEmail}>
            <input
                className={styles.email}
                placeholder="Email *"
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                required
            />
          </div>
        </div>

        {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è */}
        <div className={styles.credentials}>
          <div className={styles.stringPassword}>
            <input
                className={styles.input}
                placeholder="–ü–∞—Ä–æ–ª—å *"
                type={showPassword ? "text" : "password"}
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                required
            />
            <button
                type="button"
                className={styles.passwordToggle}
                onClick={() => togglePasswordVisibility('password')}
                aria-label={showPassword ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}
            >
              {showPassword ? "üëÅÔ∏è‚Äçüó®Ô∏è" : "üëÅÔ∏è"}
            </button>
          </div>

          {/* –ü–æ–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) */}
          {!isLoginMode && (
              <div className={styles.stringPassword}>
                <input
                    className={styles.input}
                    placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *"
                    type={showConfirmPassword ? "text" : "password"}
                    name="confirmPassword"
                    value={formData.confirmPassword}
                    onChange={handleInputChange}
                    required
                />
                <button
                    type="button"
                    className={styles.passwordToggle}
                    onClick={() => togglePasswordVisibility('confirmPassword')}
                    aria-label={showConfirmPassword ? "–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å" : "–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"}
                >
                  {showConfirmPassword ? "üëÅÔ∏è‚Äçüó®Ô∏è" : "üëÅÔ∏è"}
                </button>
              </div>
          )}

          {/* –ß–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) */}
          {!isLoginMode && (
              <div className={styles.agreement}>
                <div className={styles.agreementInner}>
                  <input
                      className={styles.agreementCheckbox}
                      type="checkbox"
                      checked={isAgreed}
                      onChange={handleAgreementChange}
                      id="agreementCheckbox"
                  />
                  <div className={styles.loginTreaty}>
                    <label htmlFor="agreementCheckbox" className={styles.div2}>
                      –Ø –ø—Ä–æ—á–∏—Ç–∞–ª –∏ –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:
                    </label>
                    <div
                        className={styles.div3}
                        onClick={() => console.log("–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥")}
                        role="link"
                        tabIndex={0}
                    >
                      –î–æ–≥–æ–≤–æ—Ä –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥
                    </div>
                  </div>
                </div>
                {/* –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è */}
                {agreementError && (
                    <div className={`${styles.formError} ${styles.agreementError}`}>
                      {agreementError}
                    </div>
                )}
              </div>
          )}

          {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥–∞) */}
          {isLoginMode && (
              <div className={styles.forgotPassword}>
                <div
                    className={styles.resetPasswordLink}
                    role="button"
                    tabIndex={0}
                    onClick={() => console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è")}
                >
                  –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
                </div>
              </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è (–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) */}
        <div className={styles.registrationButton}>
          <button
              className={styles.enterBtn}
              type="submit"
              disabled={isLoading || (!isLoginMode && !isAgreed)}
              onClick={handleSubmit}
          >
            <b className={styles.b}>
              {isLoading
                  ? "–ó–ê–ì–†–£–ó–ö–ê..."
                  : isLoginMode ? "–í–û–ô–¢–ò" : "–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø"
              }
            </b>
          </button>
        </div>

        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å "–∏–ª–∏" */}
        <div className={styles.dividerContainerWrapper}>
          <div className={styles.dividerContainer}>
            <div className={styles.divider}>
              <div className={styles.horizontalDivider}/>
            </div>
            <div className={styles.div4}>–∏–ª–∏</div>
            <div className={styles.divider}>
              <div className={styles.horizontalDivider}/>
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google */}
        <div className={styles.dividerContainerWrapper}>
          <button
              className={styles.googleBtn}
              type="button"
              onClick={() => console.log("Google –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")}
          >
            <img
                className={styles.googleBtnImgIcon}
                alt="Google"
                src="/googlebtnimg.svg"
            />
            <div className={styles.google}>
              {isLoginMode ? "–í—Ö–æ–¥ —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç Google" : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google"}
            </div>
          </button>
        </div>
      </form>
  );
};

PageContainer.propTypes = {
  className: PropTypes.string,
  onLoginSuccess: PropTypes.func
};

export default PageContainer;